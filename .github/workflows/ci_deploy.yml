name: CI Deploy - GroidBot
on:
  push:
    branches: [ dev, main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set env to development
        if: endsWith(github.ref, '/dev')
        run: |
          echo "enviroment=dev" >> $GITHUB_ENV
          echo "github_branch=dev" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_DEV }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_DEV }}" >> $GITHUB_ENV
      - name: Set env to production
        if: endsWith(github.ref, '/main')
        run: |
          echo "environment=prod" >> $GITHUB_ENV
          echo "github_branch=main" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_PROD }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_PROD }}" >> $GITHUB_ENV
      - name: output github env
        run: echo "$GITHUB_ENV"
      - name: Deploy NodeJS app
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.ssh_host }}
          port: ${{ env.ssh_port }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            #make dir if it doesnt exist
            mkdir /opt/groidbot

            #change working directory into /opt
            cd /opt

            #clone the branch, overriding any changes (only works if it doesnt already exist)
            git clone --branch ${{ env.github_branch }} github-desaerun:desaerun/groidbot.git 2>/dev/null

            #change working directory into /opt/groidbot
            cd groidbot

            #copy the .env file stored in ~/.env to the project directory
            cp ~/.env .env

            #stash any changes in case the server file has changed, to prevent merge conflict
            git stash

            #fetch the latest branch and merge it into the project dir, always accept the server's version
            git fetch origin ${{ env.github_branch }}
            git merge -s recursive -X theirs origin/${{ env.github_branch }}

            echo "Writing update log file"

            #create log if it doesnt exist
            echo "" >> /var/log/groidbot.log

            #print a line to the log file
            echo -e "$(date '+%d/%m/%Y %H:%M:%S%Z'): Changes made by: ${{ github.actor }} in $(echo \"${{ github.sha }}\" | cut -c 2-9)\n$(cat /var/log/groidbot.log)" > /var/log/groidbot.log

            #install/update dependencies
            npm install

            #stop any running bot processes
            pm2 stop all 2>/dev/null
            pm2 kill

            #start the bot
            pm2 start "npm start"
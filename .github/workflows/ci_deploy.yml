name: CI Deploy - GroidBot
on:
  push:
    branches: [ dev, main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set discord branch env var
        run: echo "github_branch=${github.ref#ref/heads/}" >> $GITHUB_ENV
      - name: Set env to development
        if: endsWith(github.ref, '/dev')
        run: |
          echo "enviroment=dev" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_DEV }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_DEV }}" >> $GITHUB_ENV
      - name: Set env to production
        if: endsWith(github.ref, '/main')
        run: |
          echo "environment=prod" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_PROD }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_PROD }}" >> $GITHUB_ENV
      - name: output github env
        run: echo "$GITHUB_ENV"
      - name: Deploy NodeJS app
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.ssh_host }}
          port: ${{ env.ssh_port }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Deploying from branch \"${{ env.github_branch }}\""

            #make dir if it doesnt exist
            mkdir -p /opt/groidbot

            #change working directory into /opt
            cd /opt

            #clone the branch, overriding any changes (only if it doesnt already exist)
            git clone --branch ${{ env.github_branch }} git@github.com:desaerun/groidbot.git 2>/dev/null

            #change working directory into /opt/groidbot
            cd groidbot

            #copy the .env file stored in ~/.env to the project directory
            cp ~/groidbot/.env .env

            #reset branch to have latest version from github
            echo "resetting branch"
            git fetch origin ${{ env.github_branch }}
            git reset --hard origin/${{ env.github_branch }}

            #create log if it doesnt exist
            touch /var/log/groidbot.log

            #print a line to the log file
            echo "Writing update log file"
            echo -e "$(date '+%d/%m/%Y %H:%M:%S%Z'): Changes made by: ${{ github.actor }} in $(echo \"${{ github.sha }}\" | cut -c 2-9)\n$(cat /var/log/groidbot.log)" > /var/log/groidbot.log

            #install/update dependencies
            echo "Verifying/installing npm dependencies"
            npm install

            #stop any running bot processes. "|| true" is to prevent script from halting if there are no processes
            echo "Stopping pm2 process"
            pm2 delete groidbot 2> /dev/null || true

            #clear the logs + start the bot
            echo "Clearing logs and spawning new pm2 process"
            pm2 flush && pm2 start "npm start" --name "groidbot"
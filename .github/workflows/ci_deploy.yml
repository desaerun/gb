name: CI Deploy - GroidBot
on:
  push:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set discord branch env var
        run: |
          GITHUB_REF=${{ github.ref }}
          GITHUB_BRANCH=${GITHUB_REF#refs/heads/}
          echo "github_branch=$GITHUB_BRANCH" >> $GITHUB_ENV
      - name: Set env to production
        if: "endsWith(github.ref, '/main')"
        run: |
          echo "environment=prod" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_PROD }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_PROD }}" >> $GITHUB_ENV
          echo "ssh_user=${{ secrets.SSH_USER_PROD }}" >> $GITHUB_ENV
      - name: Set env to production
        if: "endsWith(github.ref, '/staging')"
        run: |
          echo "environment=staging" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_DEV }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_DEV }}" >> $GITHUB_ENV
          echo "ssh_user=${{ secrets.SSH_USER_DEV }}" >> $GITHUB_ENV
      - name: Set env to development
        if: "!endsWith(github.ref, '/main') && !endsWith(github.ref, '/staging')"
        run: |
          echo "enviroment=dev" >> $GITHUB_ENV
          echo "ssh_host=${{ secrets.SSH_HOST_DEV }}" >> $GITHUB_ENV
          echo "ssh_port=${{ secrets.SSH_PORT_DEV }}" >> $GITHUB_ENV
          echo "ssh_user=${{ secrets.SSH_USER_DEV }}" >> $GITHUB_ENV
      - name: output github env
        run: echo "$GITHUB_ENV"
      - name: Deploy NodeJS app
        if: env.environment != 'staging'
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ env.ssh_host }}
          port: ${{ env.ssh_port }}
          username: ${{ env.ssh_user }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Deploying from branch \"${{ env.github_branch }}\""

            #make dir if it doesnt exist
            mkdir -p /opt/gb

            #change working directory into /opt
            cd /opt

            #clone the branch, overriding any changes (only if it doesnt already exist)
            git clone --branch ${{ env.github_branch }} git@github.com:desaerun/gb.git 2>/dev/null

            #change working directory into /opt/gb
            cd gb

            #copy the .env file stored in ~/.env to the project directory
            cp ~/gb/.env .env

            #reset branch to have latest version from github
            echo "resetting branch"
            git fetch origin ${{ env.github_branch }}
            git reset --hard origin/${{ env.github_branch }}

            #create log if it doesnt exist
            touch log/gb.log

            #print a line to the log file
            echo "Writing update log file"
            echo -e "$(date '+%Y/%m/%d %H:%M:%S%Z'): Changes made by: ${{ github.actor }} in ${{ env.github_branch }}-$(echo \"${{ github.sha }}\" | cut -c 2-9)\n$(cat log/gb.log)" > log/gb.log

            #stop any running bot processes. "|| true" is to prevent script from halting if there are no processes
            echo "Stopping pm2 process"
            pm2 delete gb || true 2> /dev/null

            #install/update dependencies
            #clear the logs + start the bot
            echo "Verifying/installing npm dependencies, clearing logs and spawning new pm2 process"
            npm ci && pm2 flush && npm start
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Guild {
  id   String @id @db.VarChar(30)
  name String @db.VarChar(255)

  channels Channel[]
  authors  Author[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, name], name: "guild_unique_name")
}

model Channel {
  id      String @id @db.VarChar(30)
  guildId String @db.VarChar(30)
  name    String @db.VarChar(255)
  guild   Guild  @relation(fields: [guildId], references: [id])

  messages       Message[]
  cryptoWatchers CryptoWatcher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, guildId, name], name: "unique_channel")
  @@index([guildId], name: "guild")
}

model Author {
  id           String  @id @db.VarChar(30)
  displayName  String? @db.VarChar(255)
  avatarUrl    String? @db.VarChar(255)
  isBot        Boolean @default(false)
  isAdmin      Boolean @default(false)
  isSuperAdmin Boolean @default(false)

  messages       Message[]
  guilds         Guild[]
  botDms         BotDm[]
  cryptoWatchers CryptoWatcher[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Message {
  id                String    @id @db.VarChar(30)
  guildId           String    @db.VarChar(30)
  channelId         String    @db.VarChar(30)
  authorId          String    @db.VarChar(30)
  content           String?   @db.Text
  timestamp         DateTime
  lastEditTimestamp DateTime?
  deletedAt         DateTime?
  deletedBy         String?   @db.VarChar(255)

  guild       Guild                @relation(fields: [guildId], references: [id])
  channel     Channel              @relation(fields: [channelId], references: [id])
  author      Author               @relation(fields: [authorId], references: [id])
  editHistory MessageEditHistory[]
  attachments MessageAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId], name: "author")
  @@index([channelId], name: "channel")
  @@index([guildId], name: "guild")
}

model MessageEditHistory {
  id            Int      @id @default(autoincrement())
  messageId     String   @db.VarChar(30)
  newContent    String?  @db.Text
  oldContent    String?  @db.Text
  editTimestamp DateTime

  message Message @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageAttachment {
  id        String   @id @db.VarChar(30)
  messageId String   @db.VarChar(30)
  name      String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  proxyUrl  String?  @db.VarChar(255)
  size      BigInt   @db.UnsignedBigInt
  height    Int?     @db.UnsignedInt
  width     Int?     @db.UnsignedInt
  timestamp DateTime

  message Message @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BotDm {
  id                String    @id @db.VarChar(30)
  authorId          String    @db.VarChar(30)
  conversationId    String    @db.VarChar(30)
  content           String    @db.Text
  timestamp         DateTime
  lastEditTimestamp DateTime?
  deletedAt         DateTime?

  author      Author          @relation(fields: [authorId], references: [id])
  editHistory DmEditHistory[]
  attachments DmAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId], name: "author")
}

model DmAttachment {
  id        Int      @id @default(autoincrement())
  messageId String   @db.VarChar(30)
  name      String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  proxyUrl  String?  @db.VarChar(255)
  size      BigInt   @db.UnsignedBigInt
  height    Int?     @db.UnsignedInt
  width     Int?     @db.UnsignedInt
  timestamp DateTime

  message BotDm @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DmEditHistory {
  id            Int      @id @default(autoincrement())
  messageId     String   @db.VarChar(30)
  newContent    String?  @db.Text
  oldContent    String?  @db.Text
  editTimestamp DateTime

  message BotDm @relation(fields: [messageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CryptoWatcher {
  id             Int                    @id @default(autoincrement())
  symbol         String
  name           String
  index          Int?                   @db.UnsignedInt
  startingPrice  Float
  targetPrice    Float
  requested      Float
  direction      CryptoWatcherDirection
  watcherType    CryptoWatcherType
  alertChannelId String                 @db.VarChar(30)
  authorId       String                 @db.VarChar(30)
  triggeredAt    DateTime?
  mentionIds     String?

  alertChannel Channel @relation(fields: [alertChannelId], references: [id])
  createdBy    Author  @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CryptoWatcherType {
  FIXED
  CHANGE
  PERCENT_CHANGE
}

enum CryptoWatcherDirection {
  UP
  DOWN
}